const easySentences = [
    "Practice makes typing much faster and more accurate. JavaScript lets you build interactive web applications easily. Use your fingers properly to type efficiently. Typing while watching your screen boosts accuracy. Stay consistent and track your typing progress daily. HTML, CSS, and JavaScript form the web’s foundation.",

    "Typing fast takes patience, effort, and regular practice. Debugging code is part of every programmer's routine. Practice makes typing much faster and more accurate. JavaScript lets you build interactive web applications easily. You can improve typing by playing word games. Focusing on accuracy is better than speed at first.",

    "Stay consistent and track your typing progress daily. HTML, CSS, and JavaScript form the web’s foundation. Use your fingers properly to type efficiently. Typing while watching your screen boosts accuracy. Practice makes typing much faster and more accurate. JavaScript lets you build interactive web applications easily.",

    "You can improve typing by playing word games. Focusing on accuracy is better than speed at first. Practice makes typing much faster and more accurate. JavaScript lets you build interactive web applications easily. Use your fingers properly to type efficiently. Typing while watching your screen boosts accuracy.",

    "Use your fingers properly to type efficiently. Typing while watching your screen boosts accuracy. Practice makes typing much faster and more accurate. JavaScript lets you build interactive web applications easily. You can improve typing by playing word games. Focusing on accuracy is better than speed at first."
];

const mediumSentences = [
    "The qu1ck brown fox jumps over the lazy dog without hesitation. While c0ding in JavaScript, always remember to check for semicolons and syntax. Proper indentation also plays a crucial role in enhancing code readability, making it easier for others to understand your logic. Comments, both single-line and multi-line, should be used to explain complex blocks of code or to leave helpful reminders. Variables should be named meaningfully, reflecting their purpose and improving maintainability. Always test your functions with edge cases and unexpected inputs to ensure reliability. Avoid global variables when possible, as they can lead to unpredictable behavior. Embrace modern ES6 features like let, const, arrow functions, and template literals to write cleaner, more efficient code. Consistency is key to writing professional, scalable JavaScript",

    "Typing is not only ab0ut speed but also about maintaining high accuracy consistently. Every great devel0per once struggled with bugs, typos, and unexpected behavior. Persistence and regular practice are the keys to improvement, especially when dealing with complex code or lengthy documentation. It's natural to make mistakes, but learning from them is what truly matters. Typing accurately helps reduce debugging time and improves overall productivity. Many professionals started slow, gradually building muscle memory and confidence over time. Don’t rush—focus on proper finger placement, posture, and steady rhythm. Even a small typo in a variable name can lead to frustrating errors. Make typing a habit, not a hurdle, and celebrate each bit of progress. With effort and consistency, your skills will grow stronger every day.",

    "Alth0ugh the sentence seems long, typing it correctly should not be diff1cult. Practice regularly to build muscle memory and improve both speed and precision. Repetition helps develop familiarity with common words, punctuation, and syntax, making it easier to type without looking at the keyboard. Over time, your fingers will naturally know where each key is located, allowing you to type confidently and without hesitation. Accuracy should always come before speed, as fast but error-prone typing can slow you down in the long run. Use typing tests to track your progress and identify weak spots. Set small daily goals to keep yourself motivated. Even a few minutes a day can lead to noticeable improvement. Stay focused, stay relaxed, and always aim to type with purpose and clarity.",

    "Web development inv0lves logic, creat1vity, and continuous problem-solving efforts. When typing fast, avoid looking at the keyb0ard to increase efficiency. The ability to type without glancing down allows you to stay focused on your code or content, reducing interruptions and boosting productivity. From writing HTML structure to styling with CSS and scripting with JavaScript, developers need to type quickly and accurately. Each keystroke contributes to building functional, visually appealing websites. Errors caused by typos can lead to hours of debugging, especially in larger projects. That’s why practicing touch typing is just as essential as learning frameworks and libraries. Build good habits early—use all ten fingers, keep your wrists relaxed, and sit with good posture. Combining strong typing skills with solid development knowledge will make you a more effective and confident programmer.",

    "Success in typing comes fr0m consistency, not just quick bursts of energy. Code, test, break, repeat — that’s the cycle of every devel0per’s day. Building speed and precision takes time, patience, and daily dedication. Just like debugging a stubborn error, improving your typing requires persistence and a growth mindset. Start slow if needed, focusing on accuracy before pushing for speed. Track your progress to stay motivated and set realistic goals. Every small improvement compounds into noticeable results over time. As a devel0per, you'll often juggle typing code, writing documentation, and communicating with teams—so sharpening your typing skills is a long-term investment. Don’t get discouraged by mistakes; each one is a learning opportunity. Practice with purpose, and eventually, typing will feel as natural as thinking."
];

const hardSentences = [
    "The quick brown f0x jumps over the lazy dog without hesitation! While coding in JavaScript, always remember to check for semicolons (;), brackets {}, and syntax. Errors like missing ) after argument list or undefined is not a function can waste hours if you're not careful. Typing accurately isn't just about speed—it's about avoiding those annoying 404s in logic. Use variables like let score = 99; or const userName = dev_123; wisely. Also, don’t forget that functions like function greet(name) { csole.log(Hello,  + name); rely heavily on clean syntax. Practice typing special characters like !=, ===, &&, and || to get used to real-world scenarios. Commenting your code using // or /* */ is a great habit! A strong grip on {logic}, [structure], and (flow) can scale your skillset exponentially. Whether you’re debugging a div issue or iterating with a for(let i = 0; i < 10; i++)",

    "Typing is not only about speed but also about maintaining high accuracy consistently. Every great dev3loper once struggled with bugs, typos, & unexpected behavior. It's perfectly normal to face errors like SyntaxError: unexpected token < or null is not an object (evaluating...) in your early days. Mastery comes through repetition, discipline, and a bit of [grit]. Whether you’re coding function calculate(a, b) { return a + b; } or styling a page with #main-container { padding: 20px; }, precision is . Practice typing sequences like console.log(Debug -> Step #1);, if(x >= 10 && x <= 50) { doSomething(); }, and even let password = Pa$$w0rd!; to simulate real dev work. Remember: even a small typo like usernmae instead of username can throw off your whole flow. Use shortcuts (Ctrl + S, Cmd + Z) to speed up your workflow. Type using all 10 fingers, focus on {accuracy}, ignore distractions (even ), and keep your posture aligned.",

    "Although the s3ntence seems long, typing it correctly shouldn't be difficu1t. Practice regularly to build muscle memory & improve both speed & precision. Don’t be discouraged by initial mistakes—accuracy > speed in the beginning! Try typing lines like let score = 87;, if (value !== null) { proceed(); }, or for let i = 0; i < arr.length; i++ { ... }. These mimic real-world coding. Learn to handle symbols like @, #, *, %, [], {}, (), and <> confidently. Even typing conle.log (Step #2 -> Process started!); with accuracy is a big win. Avoid glancing at the keyb0ard—use touch typing to boost muscle memory. Remember, 1 small error like funtion instead of function can break everything! Keep fingers on the home row (A–S–D–F & J–K–L–;), and keep wrists relaxed. Use (consistency + effort) * time = results. Whether it's a line of HTML like Hello, W0rld! or a JavaScript snippet like user.age >= 18 ? Adult : Minor;",

    "Web dev3lopment involves logic, creativity, & c0ntinuous problem-solving efforts. When typing fast, avoid looking @ the keyboard to increase efficiency. Typing efficiently is a crucial skill for every developer—whether you’re writing HTML like div ipd=container, CSS rules like #box { margin: 0 auto; }, or JavaScript like if (score >= 90) { grade = A+; }. Mistakes such as missnigBrackets[], forgetting semicolons (;), or misusing symbols like == vs === can cause unnecessary frustration. Practice typing variables like let user_1name = alpha; and const pi = 3.14; to get used to real-world syntax. You’ll often find yourself typing symbols like {}, (), <, >, @, #, and %—be comfortable with them. Even in a simple command like git commit -m Fixed issue #42, precision matters. Boost muscle memory with daily typing drills; use shortcuts (Ctrl+C, Ctrl+V, Alt+Tab) to enhance productivity. Remember, efficiency != rushing; it means working smart.",

    "Success in typing comes from c0nsistency — not just quick bursts of energy! Code, test, break, repeat... that’s the cycle of every developer’s day :) Whether you're writing a simple console.log(Hello, World!); or building a full-stack app with React & Node.js, precision matters. A single typo like funciton() instead of function() can break your code. Develop the habit of using correct syntax—pay attention to (), {}, [], and even backticks `template literals`. Practice snippets like let isLoggedIn = true;, user.age >= 18 ? Access Granted : Denied;, and for (let i = 0; i < 10; i++) { ... } to sharpen both accuracy & speed. Embrace shortcuts: Ctrl+Z (undo), Ctrl+F (find), Alt+Shift+F (format). Use variables like user_01, task#42, or temp$rate to get used to real dev syntax. Typing consistently well means fewer bugs and more flow! Even writing <section class=main-container>...</section> trains your brain & fingers."
];

export function getSentence() {
    const difficultyLevel = document.querySelector('.js-difficulty-level').value;

    let sentence = '';
    if (difficultyLevel === 'easy') {
        const index = Math.floor(Math.random() * easySentences.length);
        sentence = easySentences[index];
    }
    else if (difficultyLevel === 'medium') {
        const index = Math.floor(Math.random() * mediumSentences.length);
        sentence = mediumSentences[index];
    }
    else if (difficultyLevel === 'hard') {
        const index = Math.floor(Math.random() * hardSentences.length);
        sentence = hardSentences[index];
    }

    return sentence;
}